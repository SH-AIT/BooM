{{- if .Values.euler_copilot.framework.enabled -}}
---
apiVersion: v1
kind: Service
metadata:
  name: framework-service
  namespace: {{ .Release.Namespace }}
spec:
  type: {{ default "ClusterIP" .Values.euler_copilot.framework.service.type }}
  selector:
    app: framework
  ports:
    - name: framework
      port: 8002
      targetPort: 8002
      nodePort: {{ default nil .Values.euler_copilot.framework.service.nodePort }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: framework-deploy
  namespace: {{ .Release.Namespace }}
  labels:
    app: framework
spec:
  selector:
    matchLabels:
      app: framework
  template:
    metadata:
      annotations:
        checksum/secret: {{ include (print $.Template.BasePath "/framework/framework-config.yaml") . | sha256sum }}
      labels:
        app: framework
    spec:
      automountServiceAccountToken: false
      containers:
        - name: framework
          image: {{ .Values.euler_copilot.framework.image | default (printf "%s/neocopilot/euler-copilot-framework:0.9.6-%s" (.Values.globals.imageRegistry | default "hub.oepkgs.net") (.Values.globals.arch | default "x86")) }} 
          imagePullPolicy: {{ default "IfNotPresent" .Values.globals.imagePullPolicy }}
          ports:
            - containerPort: 8002
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health_check
              port: 8002
              scheme: HTTP
            failureThreshold: 5
            initialDelaySeconds: 60
            periodSeconds: 90
          env:
            - name: TZ
              value: "Asia/Shanghai"
            - name: CONFIG
              value: "/app/config/config.toml"
          volumeMounts:
            - mountPath: /app/config
              name: framework-shared
            - mountPath: /tmp
              name: framework-tmp-volume
            - mountPath: /app/static
              name: web-static
            - mountPath: /app/data
              name: framework-semantics-vl
          securityContext:
            readOnlyRootFilesystem: {{ default false .Values.euler_copilot.framework.readOnly }}
          resources:
            requests:
              cpu: 0.2
              memory: 512Mi
            limits:
              {{ toYaml .Values.euler_copilot.framework.resourceLimits | nindent 14 }}
      initContainers:
        - name: framework-copy
          image: {{ .Values.euler_copilot.secretInject.image | default (printf "%s/neocopilot/secret_inject:dev-%s" (.Values.globals.imageRegistry | default "hub.oepkgs.net") (.Values.globals.arch | default "x86")) }}
          imagePullPolicy: {{ default "IfNotPresent" .Values.globals.imagePullPolicy }}
          command:
            - python3
            - ./main.py
            - --config
            - config.yaml
            - --copy
          volumeMounts:
            - mountPath: /config/config.toml
              name: framework-config
              subPath: config.toml
            - mountPath: /app/config.yaml
              name: framework-config
              subPath: copy-config.yaml
            - mountPath: /config-rw
              name: framework-shared
            - mountPath: /db-secrets
              name: database-secrets
            - mountPath: /system-secrets
              name: system-secrets
      volumes:
        - name: framework-config
          configMap:
            name: framework-config
        - name: framework-semantics-vl
          persistentVolumeClaim:
            claimName: framework-semantics-claim
        - name: database-secrets
          secret:
            secretName: euler-copilot-database
        - name: system-secrets
          secret:
            secretName: euler-copilot-system
        - name: web-static
          persistentVolumeClaim:
            claimName: web-static
        - name: framework-tmp-volume
          emptyDir:
            medium: Memory
        - name: framework-shared
          emptyDir:
            medium: Memory
{{- end -}}
